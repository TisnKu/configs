" Leader key mapping should be at the top of everything
let mapleader = ","

" Configurations, see documentation: https://neovim.io/doc/user/options.html
set undodir=~/.vim_undo
set undofile
set number relativenumber
set scrolloff=10
set ignorecase
set smartcase
set showmatch
set matchtime=2 " Default 5 * 0.1s
set clipboard=unnamedplus
set showtabline=2
set smartindent
set linebreak " Soft wrap
set wildmode=longest:full,full
set wildignore+=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,*/node_modules/*
"set whichwrap=<,>,h,l
set lazyredraw
set timeoutlen=400 " Default 1000
set fileformats=unix,dos,mac
set expandtab
set shiftwidth=2 " Default 8
set tabstop=2 " Default 8
set softtabstop=2 " Default 0
set textwidth=500 " Default 0
set updatetime=300
set switchbuf=useopen,usetab,newtab
set signcolumn=yes
set completeopt=menu,menuone,noselect
set autowriteall
:au FocusLost * silent! wa " auto save on focus lost

" press hh to return to normal mode
inoremap ,, <esc>
vnoremap ,, <esc>
cnoremap ,, <esc>
inoremap <C-,> <esc>
vnoremap <C-,> <esc>
cnoremap <C-,> <esc>
inoremap hh <esc>
vnoremap hh <esc>
cnoremap hh <esc>
inoremap <C-h> <esc>
cnoremap <C-h> <esc>
vnoremap <C-h> <esc>
inoremap WW <esc>:w<cr>
nnoremap WW <esc>:w<cr>

" Map leader key to comma
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>nw :noa w<CR>
nnoremap <leader>wq :wq<CR>
noremap QQ :q!<cr>
noremap WQ :wqall<cr>
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>
noremap <leader>o o<Esc>
noremap <leader>O O<Esc>

map <silent> <leader><cr> :noh<cr>

nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

cnoremap <C-a> <Home>
inoremap <C-a> <Home>
cnoremap <C-e> <End>
inoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-d> <Del>

" Jump to parent square bracket
nnoremap ]b :call searchpair('\[','','\]')<cr>
nnoremap [b :call searchpair('\[','','\]','b')<cr>

filetype plugin indent on
command W w !sudo tee % > /dev/null

syntax enable 

vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

if has('macunix') " Mac has no alt key
  nmap <leader>tj :tabnext<cr>
  nmap <leader>tk :tabprev<cr>
  nmap <silent> “ :tabprev<cr>
  nmap <silent> ‘ :tabnext<cr>
  nnoremap ∆ :m .+1<CR>==
  nnoremap ˚ :m .-2<CR>==
  inoremap ∆  <Esc>:m .+1<CR>==gi
  inoremap ˚ <Esc>:m .-2<CR>==gi
  vnoremap ∆  :m '>+1<CR>gv=gv
  vnoremap ˚ :m '<-2<CR>gv=gv
else
  nmap <silent> <A-[> :tabprev<cr>
  nmap <silent> <A-]> :tabnext<cr>
  nnoremap <A-j> :m .+1<CR>==
  nnoremap <A-k> :m .-2<CR>==
  inoremap <A-j> <Esc>:m .+1<CR>==gi
  inoremap <A-k> <Esc>:m .-2<CR>==gi
  vnoremap <A-j> :m '>+1<CR>gv=gv
  vnoremap <A-k> :m '<-2<CR>gv=gv
endif

map <leader>tt :tabnew<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprev<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" resize window
nnoremap <silent> <leader>1 :resize -12<cr> 
nnoremap <silent> <leader>2 :resize +12<cr> 
nnoremap <silent> <leader>3 :vertical resize -12<cr> 
nnoremap <silent> <leader>4 :vertical resize +12<cr> 

nnoremap q: <nop>
nnoremap Q <nop>


command! Bclose call g:BufcloseCloseIt()
function! g:BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

command! DeleteHiddenBuffers call g:DeleteHiddenBuffers()
function! g:DeleteHiddenBuffers()
  let tpbl=[]
  call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
  for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
    if getbufvar(buf, '&mod') == 0
      silent execute 'bwipeout' buf
    endif
  endfor
endfunction

function! CmdLine(str)
  call feedkeys(":" . a:str)
endfunction 

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

""""""""""""" Search mode """""""""""""""
set ignorecase smartcase

""""""""""""" Visual mode tips """""""""""""
vnoremap <leader>(( <esc>`>a)<esc>`<i(<esc>
vnoremap <leader>[[ <esc>`>a]<esc>`<i[<esc>
vnoremap <leader>{{ <esc>`>a}<esc>`<i{<esc>
vnoremap <leader>"" <esc>`>a"<esc>`<i"<esc>
vnoremap <leader>'' <esc>`>a'<esc>`<i'<esc>
vnoremap <leader>`` <esc>`>a`<esc>`<i`<esc>

" quick replace selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>


"""""""""""" Advanced """""""""""""
" Correct jsx/tsx filetype
augroup ReactFiletypes
  autocmd!
  autocmd BufRead,BufNewFile *.jsx set filetype=javascriptreact
  autocmd BufRead,BufNewFile *.tsx set filetype=typescriptreact
augroup END

au FocusGained,BufEnter * checktime
